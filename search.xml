<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test</title>
    <url>/2020/07/14/test/</url>
    <content><![CDATA[<p>我是一个测试文件。</p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/2020/08/09/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="C-位运算基本知识"><a href="#C-位运算基本知识" class="headerlink" title="C++位运算基本知识"></a>C++位运算基本知识</h1><h2 id="与"><a href="#与" class="headerlink" title="与"></a>与</h2><table>
<thead>
<tr>
<th>input_1</th>
<th>input_2</th>
<th>output</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ a与b表示</span></span><br><span class="line">a &amp; b</span><br></pre></td></tr></table></figure>

<h2 id="或"><a href="#或" class="headerlink" title="或"></a>或</h2><table>
<thead>
<tr>
<th>input_1</th>
<th>input_2</th>
<th>output</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ a或b表示</span></span><br><span class="line">a | b</span><br></pre></td></tr></table></figure>

<h2 id="非"><a href="#非" class="headerlink" title="非"></a>非</h2><table>
<thead>
<tr>
<th>input</th>
<th>output</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ a非表示</span></span><br><span class="line">!a</span><br></pre></td></tr></table></figure>

<h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><table>
<thead>
<tr>
<th>input_1</th>
<th>input_2</th>
<th>output</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ a异或b表示</span></span><br><span class="line">a ^ b</span><br></pre></td></tr></table></figure>
<p>通过异或可以实现很多功能，例如模拟加法计算，快速找寻配偶等等。</p>
<h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p>补码的提出的初衷就是希望计算机在运算的时候只使用加法<br>正数的补码和原码相同<br>负数的补码是取反码（符号位不变）以后再加1</p>
<h2 id="按位取反"><a href="#按位取反" class="headerlink" title="按位取反"></a>按位取反</h2><table>
<thead>
<tr>
<th>input</th>
<th>output</th>
</tr>
</thead>
<tbody><tr>
<td>00000001</td>
<td>11111110</td>
</tr>
<tr>
<td>10000001</td>
<td>01111110</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ a的按位取反</span></span><br><span class="line">~a</span><br></pre></td></tr></table></figure>
<p>通过按位取反，我们可以实现lowbit功能，即找寻某一数字，最低位的1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如输入10010100，可以返回00000100，即最低位1表示的数字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (~num + <span class="number">1</span>) &amp; num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="左移、右移"><a href="#左移、右移" class="headerlink" title="左移、右移"></a>左移、右移</h2><p>左移n位相当于，原数乘上2的n次方<br>右移n位相当于，原数除以2的n次方<br>移位又分为算术移位和逻辑移位，C++和Python都是算数移位。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ a左移n位</span></span><br><span class="line">a &lt;&lt; n;</span><br><span class="line"><span class="comment">//C++ a右移n位</span></span><br><span class="line">a &gt;&gt; n;</span><br></pre></td></tr></table></figure>

<h1 id="位运算例题"><a href="#位运算例题" class="headerlink" title="位运算例题"></a>位运算例题</h1><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><blockquote>
<p>题目1：求a的b次方对p取模的值</p>
</blockquote>
<p>首先我们会想到直接使用cmath头文件的pow函数可以很快求解。但pow函数在运算会返回double类型，如果输入数据过大就会溢出。<br>如果利用循环求解，每个循环中再求模，效率又太低。因此我们可以使用快速幂来加速我们的代码执行效率。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b, p;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; p;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span> % p;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span> (b&amp;<span class="number">1</span>) res = res * <span class="number">1l</span>l * a % p;</span><br><span class="line">		a = a * <span class="number">1l</span>l * a % p;</span><br><span class="line">		b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>题目2：求a乘b对p取模的值</p>
</blockquote>
<p>类比上题求解方式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ULL a, b, p;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; p;</span><br><span class="line">	ULL res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span> (b&amp;<span class="number">1</span>) res = (res + a) % p;</span><br><span class="line">		a = a * <span class="number">2</span> % p;</span><br><span class="line">		b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最短Hamilton路径"><a href="#最短Hamilton路径" class="headerlink" title="最短Hamilton路径"></a>最短Hamilton路径</h2><blockquote>
<p>给定一张 n 个点的带权无向图，点从 0~n-1 标号，求起点 0 到终点 n-1 的最短Hamilton路径。 Hamilton路径的定义是从 0 到 n-1 不重不漏地经过每个点恰好一次。</p>
</blockquote>
<p>旅行商问题，是NP完全问题，目前还不能在多项式时间内求解，我们能做的就是优化暴力求解，本方法采用了状态压缩动态规划的方法加速计算。<br>我们定义一个状态用来表示哪些点我们已经到达，哪些点我们还没有访问到，用state来表示。<br>例如，state=001011，表示第0，1，3点已经访问。<br>我们设一个函数 f[state][j] ，表示当前走到 j 点的路径长度，我们的目标是求解 f[0111…1][n-1] ，并使其最短，采用动态规划可以表示成下式：<br>f[state][j] = min(f[state][j]，f[state_j][k] + weight[k][j]）<br>其中state_j代表着state将j点置0，代码如下。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>, M = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f[M][N], weight[M][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; weight[i][j];</span><br><span class="line">	<span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">1</span>&lt;&lt;n; ++i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)</span><br><span class="line">			<span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; ++k)</span><br><span class="line">					<span class="keyword">if</span>(i-(<span class="number">1</span> &lt;&lt; j) &gt;&gt; k &amp; <span class="number">1</span>)</span><br><span class="line">						f[i][j]=min(f[i][j], f[i-(<span class="number">1</span>&lt;&lt;j)][k] + weight[k][j]);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; f[(<span class="number">1</span> &lt;&lt; n) <span class="number">-1</span>][n<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2020/08/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h4 id="二分查找算法模板"><a href="#二分查找算法模板" class="headerlink" title="二分查找算法模板"></a>二分查找算法模板</h4><p>二分模板有两种，适用于不同情况。</p>
<h5 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h5><p>当区间[l, r]的更新操作是r=mid；l=mid+1时，计算mid不需要加1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(check(mid)) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当区间[l, r]的更新操作是r = mid - 1; l = mid时，计算mid时需加1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(l &lt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(check(mid)) l = mid;</span><br><span class="line">		<span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="实数二分"><a href="#实数二分" class="headerlink" title="实数二分"></a>实数二分</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_real</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line">	<span class="comment">//也可以改成循环次数for (int k = 0; k &lt; 100; k++）</span></span><br><span class="line">	<span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (check()) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="三分法"><a href="#三分法" class="headerlink" title="三分法"></a>三分法</h5><p>我们将要求解的问题设成一个求解曲线极值的问题。我们每次将$l$和$r$进行三等分，得到mid_l和mid_r，比较mid_l和mid_r得到三种情况：</p>
<ol>
<li>f(mid_l)&gt;f(mid_r)  r=mid_r</li>
<li>f(mid_l)&lt;f(mid_r)  l=mid_l</li>
<li>f(mid_l)=f(mid_r) 且mid_l=mid_r，则得解 , 否则归为以上两类均可</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200814092307705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTY3NjkzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tsearch</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> mid_l, mid_r, eps=<span class="number">1e-6</span>;</span><br><span class="line">	<span class="keyword">while</span>(r - l &lt; eps)&#123;</span><br><span class="line">		mid_l = l + (l - r) / <span class="number">3</span>;</span><br><span class="line">		mid_r = l + <span class="number">2</span> * (l - r) / <span class="number">3</span></span><br><span class="line">		<span class="keyword">if</span> (fun(mid_l) &gt; fun(mid_r)) r=mid_r;</span><br><span class="line">		<span class="keyword">else</span> l=mid_l;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，我们这个曲线一定要是单调的，否则三分法就无效。</p>
<h4 id="二分查找例题"><a href="#二分查找例题" class="headerlink" title="二分查找例题"></a>二分查找例题</h4><blockquote>
<p>农夫约翰的农场由 N 块田地组成，每块地里都有一定数量的牛,其数量不会少于1头，也不会超过2000头。<br>约翰希望用围栏将一部分连续的田地围起来，并使得围起来的区域内每块地包含的牛的数量的平均值达到最大。<br>围起区域内至少需要包含 F 块地，其中 F 会在输入中给出。<br>在给定条件下，计算围起区域内每块地包含的牛的数量的平均值可能的最大值是多少。</p>
</blockquote>
<p>考虑二分查找平均值最大的牛的数量。对于判定条件，我们可以利用之前学过的<a href="https://blog.csdn.net/weixin_41676930/article/details/107971905" target="_blank" rel="noopener">前缀和</a>来辅助判定。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> cows[N];</span><br><span class="line"><span class="keyword">double</span> sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> avg)</span></span>&#123;</span><br><span class="line">	<span class="comment">//前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sum[i] = sum[i<span class="number">-1</span>] + cows[i] - avg;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断第j和前缀和是否大于第j-m的前缀和，大于则成立，否则不成立</span></span><br><span class="line">    <span class="keyword">double</span> minv = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = m; j &lt;= n; i++, j++)&#123;</span><br><span class="line">    	<span class="comment">//minv用来存储距离第j-m个数以前的最小值</span></span><br><span class="line">        minv = min(minv, sum[i]);</span><br><span class="line">        <span class="keyword">if</span> (sum[j] &gt;= minv) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//n代表总的田地数，m代表至少包含的田地数</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; cows[i];</span><br><span class="line">    <span class="comment">//二分法</span></span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; <span class="number">1e-5</span>)&#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">int</span>(r * <span class="number">1000</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有N个元素，编号1.2..N，每一对元素之间的大小关系是确定的，关系具有反对称性，但不具有传递性。<br>注意：不存在两个元素大小相等的情况。<br>也就是说，元素的大小关系是N个点与N*(N-1)/2条有向边构成的任意有向图。<br>然而，这是一道交互式试题，这些关系不能一次性得知，你必须通过不超过10000次提问来获取信息，每次提问只能了解某两个元素之间的关系。<br>现在请你把这N个元素排成一行，使得每个元素都小于右边与它相邻的元素。<br>你可以通过我们预设的bool函数compare来获得两个元素之间的大小关系。<br>例如，编号为a和b的两个元素，如果元素a小于元素b,则compare（a,b）返回true，否则返回false。<br>将N个元素排好序后，把他们的编号以数组的形式输出，如果答案不唯一，则输出任意一个均可。</p>
</blockquote>
<p>我们可以尝试，将这种大小关系转换成曲线来表示，假如我们现在将第i个数插入已经排好的数列中，当它比数列中a元素小的时候，那么a就表示成一个下划线；当它比a元素大的时候，就表示成一个上划线。可以表示成下图：<br><img src="https://img-blog.csdnimg.cn/20200814110037180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTY3NjkzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>基于此，我们可以利用二分来寻找曲线的极大值，然后插入即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Forward declaration of compare API.</span></span><br><span class="line"><span class="comment">// bool compare(int a, int b);</span></span><br><span class="line"><span class="comment">// return bool means whether a is less than b.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">specialSort</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//res用来存放排好的数组</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        res.push_back(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//二分查找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = res.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (compare(res[mid], i)) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(i);</span><br><span class="line">            <span class="comment">//将i插到找到的位置，利用插入排序的方法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = res.size() - <span class="number">2</span>; j &gt; r; j--) swap(res[j], res[j + <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//有可能整个曲线是单调递减的，这样的话我们需要补充边界条件</span></span><br><span class="line">            <span class="keyword">if</span> (compare(i, res[r])) swap(res[r], res[r + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过二分查找可以满足访问次数低于10000次的要求。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>递归与递推</title>
    <url>/2020/08/10/%E9%80%92%E5%BD%92%E4%B8%8E%E9%80%92%E6%8E%A8/</url>
    <content><![CDATA[<h4 id="递归实现指数型枚举"><a href="#递归实现指数型枚举" class="headerlink" title="递归实现指数型枚举"></a>递归实现指数型枚举</h4><blockquote>
<p>从1~n这n个整数中随机选取任意多个，输出所有可能的选择方案。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//u代表当前进行的递归计数，state代表哪些数被选与未选</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> state)</span></span>&#123;</span><br><span class="line">	<span class="comment">//达到n时输出</span></span><br><span class="line">	<span class="keyword">if</span>(u == n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">if</span>(state &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//不选当前数字</span></span><br><span class="line">	dfs(u + <span class="number">1</span>, state);</span><br><span class="line">	<span class="comment">//选择当前数字</span></span><br><span class="line">	dfs(u + <span class="number">1</span>, state | <span class="number">1</span> &lt;&lt; u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="递归实现组合型枚举"><a href="#递归实现组合型枚举" class="headerlink" title="递归实现组合型枚举"></a>递归实现组合型枚举</h4><blockquote>
<p>从1~n这n个整数中随机选出m个，输出所有可能的选择方案。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="comment">//u代表当前进行的递归计数，sum代表选取了多少个数，state代表哪些数被选与未选</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> sum, <span class="keyword">int</span> state)</span></span>&#123;</span><br><span class="line"> 	<span class="comment">//当选不够m个的时候返回，剪枝处理</span></span><br><span class="line">	<span class="keyword">if</span>(sum + n - u &lt; m) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">//当选够m个的时候输出</span></span><br><span class="line">	<span class="keyword">if</span>(sum == m)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">			<span class="keyword">if</span>(state &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">			    <span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当前数字被选</span></span><br><span class="line">	dfs(u + <span class="number">1</span>, sum + <span class="number">1</span>, state | <span class="number">1</span> &lt;&lt; u);</span><br><span class="line">	<span class="comment">//当前数字未选</span></span><br><span class="line">	dfs(u + <span class="number">1</span>, sum, state);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="递归实现排列型枚举"><a href="#递归实现排列型枚举" class="headerlink" title="递归实现排列型枚举"></a>递归实现排列型枚举</h4><blockquote>
<p>把1~n这n个整数排成一行后随机打乱顺序，输出所有可能的次序。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line"><span class="comment">//u代表当前进行的递归计数，state代表哪些数被选与未选</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> state)</span></span>&#123;</span><br><span class="line">	<span class="comment">//如果u等于n，则输出当前的排列</span></span><br><span class="line">	<span class="keyword">if</span>(u == n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> x : path) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//对于当前第u位，将未选的数字填入，然后递归</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">		<span class="keyword">if</span>(!(state &gt;&gt; i &amp; <span class="number">1</span>))&#123;</span><br><span class="line">			path.push_back(i + <span class="number">1</span>);</span><br><span class="line">			dfs(u + <span class="number">1</span>, state | (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">			path.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="费解的开关"><a href="#费解的开关" class="headerlink" title="费解的开关"></a>费解的开关</h4><blockquote>
<p>你玩过拉灯游戏吗？25盏灯排成一个5x5的方形。每个灯都有一个开关，游戏者可以改变它的状态。每一步，游戏者可以改变某一个灯的状态。游戏者改变一个灯的状态会产生连锁反应；和这个灯上下左右相邻的灯也要相应地改变状态。<br>我们用数字“1”表示驿站开着的灯，用数字“0”表示关着的灯。下面这种状态<br>10111<br>01101<br>10111<br>10000<br>11011<br>在改变了最左上角的灯的状态后将变成：<br>01111<br>11101<br>10111<br>10000<br>11011<br>给定一些游戏的初始状态，编写程序判断游戏者是否可能在6步之内使所有的灯都变亮。</p>
</blockquote>
<p>我们可以知道对于一些要按的灯，按灯顺序不会影响最终灯的状态。那么我们可以把这个问题逐行分解，对于第一行我们将可能的按法全部枚举，对于后续行我们的目标就是使得前一行的灯全部按亮。由此判断可不可以在6次内全部按亮。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//g数组存放灯的状态，dx和dy用来表示邻近灯</span></span><br><span class="line"><span class="keyword">char</span> g[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//turn函数会修改当前灯与周围灯的状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> a = x + dx[i], b = y + dy[i];</span><br><span class="line">		<span class="keyword">if</span>(a &gt;= <span class="number">0</span> &amp;&amp; a &lt; <span class="number">5</span> &amp;&amp; b &gt;=<span class="number">0</span> &amp;&amp; b &lt; <span class="number">5</span>)&#123;</span><br><span class="line">			<span class="comment">//g[a][b] = '1' - g[a][b] + '0';</span></span><br><span class="line">			g[a][b] ^= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//ans代表可能全亮的最少按灯次数</span></span><br><span class="line">	<span class="keyword">int</span> ans = INF;</span><br><span class="line">	<span class="comment">//遍历第一行可能的按法</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k&lt;<span class="number">1</span>&lt;&lt;<span class="number">5</span>; k++)&#123;</span><br><span class="line">		<span class="comment">//res代表按灯次数</span></span><br><span class="line">		<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">char</span> backup[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">		<span class="built_in">memcpy</span>(backup, g, <span class="keyword">sizeof</span> g);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)</span><br><span class="line">			<span class="keyword">if</span>(k &gt;&gt; j &amp; <span class="number">1</span>)&#123;</span><br><span class="line">				res++;</span><br><span class="line">				turn(<span class="number">0</span>, j);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="comment">//根据当前行出现的灭灯，修改下一行对应位置的灯</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)</span><br><span class="line">				<span class="keyword">if</span>(g[i][j] == <span class="string">'0'</span>)&#123;</span><br><span class="line">					res++;</span><br><span class="line">					turn(i + <span class="number">1</span>, j);</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="comment">//观察最后一行灯是否全亮，如果全亮将按灯次数与之前比较</span></span><br><span class="line">		<span class="keyword">bool</span> is_successful = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)</span><br><span class="line">			<span class="keyword">if</span>(g[<span class="number">4</span>][j] == <span class="string">'0'</span>)&#123;</span><br><span class="line">				is_successful = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span>(is_successful) ans = min(ans, res);</span><br><span class="line">		<span class="built_in">memcpy</span>(g, backup, <span class="keyword">sizeof</span> g);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ans &gt; <span class="number">6</span>) ans=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) <span class="built_in">cin</span> &gt;&gt; g[i];</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; work() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="奇怪的汉诺塔"><a href="#奇怪的汉诺塔" class="headerlink" title="奇怪的汉诺塔"></a>奇怪的汉诺塔</h4><blockquote>
<p>汉诺塔问题，条件如下：</p>
</blockquote>
<ol>
<li>这里有A、B、C和D四座塔。</li>
<li>这里有n个圆盘，n的数量是恒定的， 且n&lt;=12。</li>
<li>每个圆盘的尺寸都不相同。</li>
<li>所有圆盘在开始时都堆叠在塔A上，且圆盘尺寸从塔顶到塔底逐渐增大。</li>
<li>我们需要将所有的圆盘都从塔A转移到塔D上。</li>
<li>每次可以移动一个圆盘，当塔为空塔或者塔顶圆盘尺寸大于被移动圆盘时，可将圆盘移至这座塔上。<br>请你求出将所有圆盘从塔A移动到塔D，所需的最小移动次数是多少。<br><img src="https://img-blog.csdnimg.cn/20200809141024645.png#pic_center" alt="在这里插入图片描述"></li>
</ol>
<p>我们可以将其化为一个动态规划问题，对于三阶汉诺塔，我们可以将问题描述为D[n] = DD[n-1] x 2 + 1，即先将前n-1个圆盘移到第二个塔上，再将最后一个圆盘放到第三个塔上（仅一步操作），最后将第二个塔上的圆盘全部移动到第三个塔上。</p>
<p>而对于四阶汉诺塔，我们要寻找一个合适的圆盘i，将其上的圆盘先移动到一个塔上，所需移动次数设为F[i]。然后再将其下的圆盘移动到最后一个塔上，此时就是三阶汉诺塔问题，D[n-i]。然后再将前i个圆盘移动到最后塔上，即F[i]。这个合适的圆盘i就是使得移动次数最少的圆盘。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> d[<span class="number">15</span>], f[<span class="number">15</span>];</span><br><span class="line">	d[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=<span class="number">12</span>; i++)&#123;</span><br><span class="line">		d[i] = <span class="number">1</span> + d[i<span class="number">-1</span>] * <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">12</span>; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">			f[i] = min(f[i], f[j] * <span class="number">2</span> + d[i - j]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">12</span>; i++) <span class="built_in">cout</span> &lt;&lt; f[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="约数之和"><a href="#约数之和" class="headerlink" title="约数之和"></a>约数之和</h4><blockquote>
<p>假设现在有两个自然数A和B，S是$A^B$的所有约数之和。<br>请你求出S mod 9901的值是多少。</p>
</blockquote>
<p>对于数A，我们可以将其分解成质数的形式，A=${p_{1}}^{k_{1}}{p_{2}}^{k_{2}}···{p_{n}}^{k_{n}}$，其中${p_{n}}$是A的质数约数，我们可以修改${k_{n}}$的大小来获得不同的约数，对于所有的约数之和我们可以表示为：<br>$({p_{1}}^{0}+{p_{1}}^{1}+\cdot \cdot \cdot +{p_{1}}^{k_{1}})\times ({p_{2}}^{0}+{p_{2}}^{1}+\cdot \cdot \cdot +{p_{2}}^{k_{2}})\times \cdot \cdot \cdot \times ({p_{n}}^{0}+{p_{n}}^{1}+\cdot \cdot \cdot +{p_{n}}^{k_{n}})$<br>对于每一部分，我们还可以进一步化简，例如，当$k_1$是奇数的时候，我们可以化简为<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${p_{1}}^{0}+{p_{1}}^{1}+\cdot \cdot \cdot +{p_{1}}^{k_{1}}$<br>$= {p_{1}}^{0}+{p_{1}}^{1}+\cdot \cdot \cdot +{p_{1}}^{k_{1}/2}+{p_{1}}^{k_{1}/2+1}\times ({p_{1}}^{0}+{p_{1}}^{1}+\cdot \cdot \cdot +{p_{1}}^{k_{1}/2})$<br>其中/代表着整数除法<br>如果$k_n$为偶数，那么就提出一个$p_n$即可，这样利用递归我们可以加速求解<br>而对于${p_{1}}^{k_{1}/2+1}$我们可以利用快速幂进行求解（参考上一博客位运算）。如下是代码实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">9901</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	a %= mod;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(k)&#123;</span><br><span class="line">		<span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">		a = a * a % mod;</span><br><span class="line">		k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//如果k是偶数就提出一个P，则k-1变为奇数</span></span><br><span class="line">	<span class="keyword">if</span>(k % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> (p % mod * sum(p, k - <span class="number">1</span>) + <span class="number">1</span>) % mod;</span><br><span class="line">	<span class="comment">//如果k是奇数</span></span><br><span class="line">	<span class="keyword">return</span> (<span class="number">1</span> + qmi(p, k/<span class="number">2</span> + <span class="number">1</span>)) * sum(p, k/<span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> A, B;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=A; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(A % i ==<span class="number">0</span>)&#123;</span><br><span class="line">			s++;</span><br><span class="line">			A /= i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s) res = res * sum(i, s * B) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!A) res = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="分形之城"><a href="#分形之城" class="headerlink" title="分形之城"></a>分形之城</h4><blockquote>
<p>城市的规划在城市建设中是个大问题。<br>不幸的是，很多城市在开始建设的时候并没有很好的规划，城市规模扩大之后规划不合理的问题就开始显现。<br>而这座名为 Fractal 的城市设想了这样的一个规划方案，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200810085620117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTY3NjkzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="city.png">当城区规模扩大之后，Fractal 的解决方案是把和原来城区结构一样的区域按照图中的方式建设在城市周围，提升城市的等级。<br>对于任意等级的城市，我们把正方形街区从左上角开始按照道路标号。<br>虽然这个方案很烂，Fractal 规划部门的人员还是想知道，如果城市发展到了等级 N，编号为 A 和 B 的两个街区的直线距离是多少。<br>街区的距离指的是街区的中心点之间的距离，每个街区都是边长为 10 米的正方形。</p>
</blockquote>
<p>我们可以发现每一等级的城市都是由上一等级城市旋转平移得到的，所以对于该题，我们可以将n等级的城市进行递归，从1等级开始处理。<br>将城市划分成四个区域，左上、右上、左下、右下四个分区，根据所在分区决定上一等级城市该如何旋转平移。然后再将得到的当前等级城市下的坐标，传递给下一等级的城市，直至规定等级。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PLL pair<span class="meta-string">&lt;ll,ll&gt;</span></span></span><br><span class="line"><span class="function">PLL <span class="title">calc</span><span class="params">(ll n,ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//边界结果</span></span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> make_pair(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//len代表当前等级下城市边长的一半（移动上一等级城市需要），cnt表示当前等级城市下街道数量的1/4（决定分区）</span></span><br><span class="line">    ll len=<span class="number">1L</span>L&lt;&lt;(n<span class="number">-1</span>),cnt=<span class="number">1L</span>L&lt;&lt;(<span class="number">2</span>*n<span class="number">-2</span>);</span><br><span class="line">    <span class="comment">//递归到最低级城市</span></span><br><span class="line">    PLL pos=calc(n<span class="number">-1</span>,m%cnt);</span><br><span class="line">    ll x=pos.first,y=pos.second;</span><br><span class="line">    <span class="comment">//z表示当前等级城市下，m序号的街道所处的分区，分为左上、右上、左下、右下四个分区，从而决定如何旋转</span></span><br><span class="line">    ll z=m/cnt;</span><br><span class="line">    <span class="comment">//根据分区位置旋转平移上一等级的街道，其中（x,y）代表上一等级城市下街道的位置</span></span><br><span class="line">    <span class="keyword">if</span> (z==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> make_pair(y,x);</span><br><span class="line">    <span class="keyword">if</span> (z==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> make_pair(x,y+len);</span><br><span class="line">    <span class="keyword">if</span> (z==<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> make_pair(x+len,y+len);</span><br><span class="line">    <span class="keyword">return</span> make_pair(<span class="number">2</span>*len<span class="number">-1</span>-y,len<span class="number">-1</span>-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n,a,b;</span><br><span class="line">        <span class="comment">//这里n代表当前城市等级，a、b代表两个街道的序号</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="comment">//简化边界处理，将序号从0开始</span></span><br><span class="line">        PLL x=calc(n,a<span class="number">-1</span>);</span><br><span class="line">        PLL y=calc(n,b<span class="number">-1</span>);</span><br><span class="line">        ll dx=x.first-y.first,dy=x.second-y.second;</span><br><span class="line">        <span class="keyword">double</span> ans=(<span class="built_in">sqrt</span>(dx*dx+dy*dy)*<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%0.lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="递归改递推"><a href="#递归改递推" class="headerlink" title="递归改递推"></a>递归改递推</h4><p>用递推来实现递归代码，需要借助STL中的栈，计算机本身在处理递归代码的时候也是使用栈来实现的。</p>
<p>在这里我们通过“递归实现组合型枚举”来举例说明，我们首先要把原递归代码划分位置，用来标记处理过程。通过定义结构体，作为栈的保存对象，其中要包含标记位置。主函数中我们循环取出栈首元素，根据所标记的位置来决定如何处理当前元素，直至栈空。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">State</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> pos, u, sum, state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> sum, <span class="keyword">int</span> state)</span></span>&#123;</span><br><span class="line">	<span class="comment">//0</span></span><br><span class="line">	<span class="keyword">if</span>(sum + n _ u &lt; m) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(sum == m)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">			<span class="keyword">if</span>(state &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(u + <span class="number">1</span>, sum + <span class="number">1</span>, state | <span class="number">1</span> &lt;&lt; u);</span><br><span class="line">	<span class="comment">//1</span></span><br><span class="line">	dfs(u + <span class="number">1</span>, sum, state);</span><br><span class="line">	<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="comment">//dfs(0, 0, 0)</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">stack</span>&lt;State&gt; stk;</span><br><span class="line">	stk.push(&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(stk.size())&#123;</span><br><span class="line">		<span class="keyword">auto</span> t=stk.yop;</span><br><span class="line">		stk.pop();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(t.pos == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(t.sum + n - t.u &lt; m) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(t.sum == m)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">					<span class="keyword">if</span>(t.state &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			t.pos = <span class="number">1</span>;</span><br><span class="line">			stk.push(t);</span><br><span class="line">			stk.push(&#123;<span class="number">0</span>, t.u + <span class="number">1</span>, t.sum + <span class="number">1</span>, t.state | <span class="number">1</span> &lt;&lt; t.u&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(t.pos == <span class="number">1</span>)&#123;</span><br><span class="line">			t.pos = <span class="number">2</span>;<span class="comment">//可去掉</span></span><br><span class="line">			stk.push(t);<span class="comment">//可去掉</span></span><br><span class="line">			stk.push(&#123;<span class="number">0</span>, t.u + <span class="number">1</span>, t.sum, t.state&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">continue</span>;<span class="comment">//可去掉</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>标记位置的方法只是个通用模板，我们可以将得到的递推继续优化如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">State</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> u, sum, state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="comment">//dfs(0, 0, 0)</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">stack</span>&lt;State&gt; stk;</span><br><span class="line">	stk.push(&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(stk.size())&#123;</span><br><span class="line">		<span class="keyword">auto</span> t=stk.top();</span><br><span class="line">		stk.pop();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(t.sum + n - t.u &lt; m) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(t.sum == m)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">				<span class="keyword">if</span>(t.state &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        stk.push(&#123;t.u + <span class="number">1</span>, t.sum, t.state&#125;);</span><br><span class="line">		stk.push(&#123;t.u + <span class="number">1</span>, t.sum + <span class="number">1</span>, t.state | <span class="number">1</span> &lt;&lt; t.u&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和与差分</title>
    <url>/2020/08/14/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<h4 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h4><blockquote>
<p>地图上有 N 个目标，用整数Xi,Yi表示目标在地图上的位置，每个目标都有一个价值Wi。注意：不同目标可能在同一位置。<br>现在有一种新型的激光炸弹，可以摧毁一个包含 R×R 个位置的正方形内的所有目标。激光炸弹的投放是通过卫星定位的，但其有一个缺点，就是其爆炸范围，即那个正方形的边必须和x，y轴平行。<br>求一颗炸弹最多能炸掉地图上总价值为多少的目标。</p>
</blockquote>
<p>前缀和的定义就是对于当前数组，第i个数以前的数的总和，形成一个新的数组，即前缀和数组。$sum[i]=\sum_{j=0}^{i}num[i]$<br>以上是一维情况，对于二维数组，我们可以把它看成一个矩形，当前点的前缀和就是所在行以前和所在列以前所有数的总和$sum[i][j]=\sum_{m=0}^{i}\sum_{n=0}^{j}num[i][j]$<br>可以表示成下图的形式，对于黄色框内的前缀和，就是黄色=绿色+红色-蓝色。<br><img src="https://img-blog.csdnimg.cn/20200813092853480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTY3NjkzMA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>对于这题，我们就可以用二维前缀和进行快速求解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//M是二维数组最大范围</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">5010</span>;</span><br><span class="line"><span class="comment">//记录二维数组每个点的价值, 初始化为0，记作全局变量，存储在堆空间，防止栈满。</span></span><br><span class="line"><span class="keyword">int</span> g[M][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//输入N行，每行输入一组数据，每组数据包括三个整数Xi,Yi,Wi,</span></span><br><span class="line">	<span class="comment">//R表示爆炸范围</span></span><br><span class="line">    <span class="keyword">int</span> N, R;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; R;</span><br><span class="line">    <span class="comment">//n和m用来记录最大边界</span></span><br><span class="line">    <span class="keyword">int</span> n = R, m = R;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, x, y, w; i&lt;N; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; w;</span><br><span class="line">        <span class="comment">//处理边界，从1开始</span></span><br><span class="line">        x++, y++;</span><br><span class="line">        n=max(n,x), m=max(m,y);</span><br><span class="line">        g[x][y] += w;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)</span><br><span class="line">            g[i][j] += g[i<span class="number">-1</span>][j] + g[i][j<span class="number">-1</span>] - g[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历前缀和，求解最大值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=R; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=R; j&lt;=m; j++)</span><br><span class="line">            res=max(res,g[i][j]-g[i-R][j]-g[i][j-R]+g[i-R][j-R]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还可以进一步简化代码，在计算前缀和的同时求解最大值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">5010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[M][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, R;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; R;</span><br><span class="line">    <span class="keyword">int</span> n = R, m = R;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, x, y, w; i&lt;N; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; w;</span><br><span class="line">        x++, y++;</span><br><span class="line">        n=max(n,x), m=max(m,y);</span><br><span class="line">        g[x][y] += w;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)&#123;</span><br><span class="line">            g[i][j] += g[i<span class="number">-1</span>][j] + g[i][j<span class="number">-1</span>] - g[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            x=max(i-R, <span class="number">0</span>);</span><br><span class="line">            y=max(j-R, <span class="number">0</span>);</span><br><span class="line">            res=max(res,g[i][j]-g[x][j]-g[i][y]+g[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h4><p>差分的定义就是，对于给定的数组$num$，第i个数和第i-1的差值所组成的新的数组就是差分数组，$dif[i]=num[i]-num[i-1]$（$dif[0]=num[0]$)。<br>对于差分数组和原数组存在如下关系<br>$num[i]=dif[0]+dif[1]+···+dif[i]<br>            =num[0]+num[1]-num[0]+···+num[i]-num[i-1]$</p>
<blockquote>
<p>给定一个长度为 n 的数列 a1,a2,…,an，每次可以选择一个区间 [l,r]，使下标在这个区间内的数都加一或者都减一。<br>求至少需要多少次操作才能使数列中的所有数都一样，并求出在保证最少次数的前提下，最终得到的数列可能有多少种。</p>
</blockquote>
<p>利用差分数组，对于某个区间（l, r）内加1，只需$b[l]+=1,b[r]-=1$，这样就可以在$O(1)$时间复杂度更改，而不用遍历（l，r）范围内的数组。<br>借用差分数组，我们只需将差分数组全部变为0，就可以使原数组的数全部相同。而对于可执行的操作，我们可以分成如下4类：</p>
<ol>
<li>1&lt;=i，j&lt;=n               该操作是针对i，j范围，必然伴随差分数组某两个数的加1以及减1</li>
<li>i=0, 1&lt;=j&lt;=n            该操作是针对j以前的所有数，只伴随着差分数组某个数的加1或者减1</li>
<li>1&lt;=i&lt;=n, j=n+1        该操作是针对i以后的所有数，同上</li>
<li>i=0, j=n+1                该操作是针对数组全部 差分数组不变</li>
</ol>
<p>对于第一种情况一次操作可以更改差分数组的两个数，是我们应该优先选择的，通过加减两个差分数组的数，可以使得数组中的正数和负数相抵消，最后再用第二种和第三种方法对剩余的正数或者负数进行清零。如此满足最少操作的要求。第四种操作没有意义。</p>
<p>我们需要知道一点，当差分数组正数之和和负数之和相等的时候，利用第一种方式对差分数组清零，无论操作顺序是什么样的，整个数组得到的结果都是一样的，都是和初始数组首末值相等的数组。因此我们可以得出，对于最终数组的可能情况仅仅取决于对剩余正数或者负数的操作。<br>而对于剩余数的操作只有第二种和第三种方式，两种方式的可能组合的方式数，就是最终解。直观一点来看，例如我们最终剩余正数是下图左边所示：<br><img src="https://img-blog.csdnimg.cn/20200813111323564.png#pic_center" alt="在这里插入图片描述"><br>黑线代表了差分数组还有两个正数差值，均是1，因此我们最终通过第2，3种方法，可以使原数组有红黄蓝三种方式使差分数组清零。最终代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;	</span><br><span class="line">	<span class="comment">//接受数组</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="comment">//生成差分数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n; i&gt;<span class="number">1</span>; i--) a[i]-=a[i<span class="number">-1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算差分数组正负数总和</span></span><br><span class="line">    LL pos=<span class="number">0</span>, neg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="number">0</span>) pos+=a[i];</span><br><span class="line">        <span class="keyword">else</span> neg-=a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max(pos, neg) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">abs</span>(pos-neg)+<span class="number">1</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有 N 头牛站成一行，被编队为1、2、3…N，每头牛的身高都为整数。<br>当且仅当两头牛中间的牛身高都比它们矮时，两头牛方可看到对方。<br>现在，我们只知道其中最高的牛是第 P 头，它的身高是 H ，剩余牛的身高未知。<br>但是，我们还知道这群牛之中存在着 M 对关系，每对关系都指明了某两头牛 A 和 B 可以相互看见。<br>求每头牛的身高的最大可能值是多少。</p>
</blockquote>
<p>这道题我们可以很明确的知道，数组首位的牛最高值就是H，因为给定的M对关系仅仅是数组内部的关系。所以根据于此，我们可以利用差分数组记录每对关系，在根据首位来确定原数组最理想的形式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> height[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//n是牛的数量，p是第几头牛最高，h是最高的牛的高度，m是关系数。</span></span><br><span class="line">    <span class="keyword">int</span> n, p, h, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; h &gt;&gt; m;</span><br><span class="line">    height[<span class="number">1</span>]=h;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据关系，对差分数组的边界进行处理</span></span><br><span class="line">    <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; existed;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, a, b; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b) swap(a,b);</span><br><span class="line">        <span class="keyword">if</span>(!existed.count(&#123;a, b&#125;))&#123;</span><br><span class="line">            existed.insert(&#123;a, b&#125;);</span><br><span class="line">            height[a+<span class="number">1</span>]--, height[b]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据差分数组，求解原数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        height[i] += height[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; height[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS_Tutorials</title>
    <url>/2020/07/25/ROS-Tutorials/</url>
    <content><![CDATA[<p>本科时候图方便仅仅使用了Windows下的V-REP（想想用gazebo还要学Linux和ROS就好麻烦…)，最近由于需要学习了ROS，也算是填上本科时候埋下的坑(&gt;﹏&lt;)。</p>
<p>本文主要针对<a href="http://wiki.ros.org/cn" target="_blank" rel="noopener">ROS wiki教程</a>基于ROS Noetic踩得雷做一下总结，关于如何学习ROS，可以参考知乎高赞,马学长的回答<a href="https://zhuanlan.zhihu.com/p/26007106" target="_blank" rel="noopener">ROS学习入门（抛砖引玉篇）</a>。</p>
<h2 id="ROS安装"><a href="#ROS安装" class="headerlink" title="ROS安装"></a>ROS安装</h2><p>目前有在维护的版本有Kinetic、Melodic以及Noetic。由于我的Ubuntu版本是20.04，所以选择了Noetic，并且Noetic是最新版本，会维护到2025年。</p>
<p>在安装Ubuntu系统的时候切记主分区要大于15G，我最开始分了10G结果ROS安一半，它满了！！！弄得我又重装了一遍系统…</p>
<h2 id="节点、话题、服务"><a href="#节点、话题、服务" class="headerlink" title="节点、话题、服务"></a>节点、话题、服务</h2><p>这部分按照教程来做就可以了，注意Hydro版本和非Hydro版本的命令区别。</p>
<h2 id="创建ROS消息和服务"><a href="#创建ROS消息和服务" class="headerlink" title="创建ROS消息和服务"></a>创建ROS消息和服务</h2><p>在新增ROS消息和服务以后我们要对Catkin_package.txt进行修改，增加依赖，生成器，调用生成。</p>
<p>因为好多部分教程都要求找到注释代码，修改以后去掉注释，使代码生效。例如下面这样：<br><img src="https://raw.githubusercontent.com/LeoWangUSTC/picture/master/ROS_Tutorials/%E6%8D%95%E8%8E%B7.PNG" alt=""></p>
<p>我又…是图方便，没有查找注释代码，直接将修改代码添加到尾部，当时觉得反正那部分也是注释无效的，结果又开启了找BUG之旅…</p>
<p>最后发现CMakeList.txt文件必须遵循如下的格式，不然就无法正确地编译：<br>1.查找编译依赖的其他CMake/Catkin包（声明依赖库）：find_package()<br>2.添加消息/服务/操作文件：add_message_files()…<br>3.调用消息/服务/操作生成：generate_messages()</p>
<h2 id="roswtf使用"><a href="#roswtf使用" class="headerlink" title="roswtf使用"></a>roswtf使用</h2><p>roswtf 可以检查你的ROS系统并尝试发现问题。</p>
<p>当我运行roswtf时发现系统报错,需要更新rosdep。<br><img src="https://raw.githubusercontent.com/LeoWangUSTC/picture/master/ROS_Tutorials/2020-07-24%2011-00-15%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p>而当我按照提示运行命令rosdep update时又会发现：<br><img src="https://raw.githubusercontent.com/LeoWangUSTC/picture/master/ROS_Tutorials/2020-07-24%2011-01-04%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p>卑微的我又按照提示安装了python3-rosdep2<br><img src="https://raw.githubusercontent.com/LeoWangUSTC/picture/master/ROS_Tutorials/2020-07-24%2011-02-20%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p>本以为按照提示将缺少的软件包安装以后就万事大吉，结果当运行roscore的时候原本正常的ROS开始报错！<br><img src="https://raw.githubusercontent.com/LeoWangUSTC/picture/master/ROS_Tutorials/2020-07-24%2011-03-30%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p>于是我就经历了卸ROS，安ROS，Google+Baidu无限的月读轮回当中╥﹏╥<br>最后偶然发现，在安装rosdep的过程当中，第一行提示正在卸载ros-noetic-desktop-full，what！！！？？？原来是rosdep在安装的过程中偷偷摸摸把我的ros-noetic卸载了，于是我在安装rosdep以后重装了一遍ros，这时候在运行roscore、roswtf就没问题啦！<br><img src="https://raw.githubusercontent.com/LeoWangUSTC/picture/master/ROS_Tutorials/2020-07-24%2011-02-57%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/LeoWangUSTC/picture/master/ROS_Tutorials/2020-07-24%2011-05-39%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br><img src="https://raw.githubusercontent.com/LeoWangUSTC/picture/master/ROS_Tutorials/2020-07-24%2011-05-59%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
</search>
